import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { set, unset } from 'lodash';
import { RootState } from '../../app/store';
import { IDirectoryUpdatePayload, IDirTreeStructure } from '../../interfaces';
import { fetchDirTreeList } from './dir-tree-list-api';
import { prepareDirTreePath } from '../../utils';

export interface DirTreeListState {
    value: IDirTreeStructure;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: DirTreeListState = {
    value: {},
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic.
export const getDirTreeList = createAsyncThunk(
    'dirTreeList/fetchDirTreeList',
    async () => {
        const response = await fetchDirTreeList();
        return response.data;
    }
);

export const dirTreeListSlice = createSlice({
    name: 'dirTreeList',
    initialState,
    reducers: {
        addItemToDirTree: (state, action: PayloadAction<IDirectoryUpdatePayload>) => {
            const dirTreeObj = state.value[action.payload.directory];
            const path = prepareDirTreePath(action.payload.path);
            const value = action.payload.itemType === 'file' ? null : {};

            if (dirTreeObj) {
                set(dirTreeObj, path, value);
            }
        },
        removeItemFromDirTree: (state, action: PayloadAction<IDirectoryUpdatePayload>) => {
            const dirTreeObj = state.value[action.payload.directory];
            const path = prepareDirTreePath(action.payload.path);

            if (dirTreeObj) {
                unset(dirTreeObj, path);
            }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getDirTreeList.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getDirTreeList.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            })
            .addCase(getDirTreeList.rejected, (state) => {
                state.status = 'failed';
                state.value = {};
            })
    },
});

export const { addItemToDirTree, removeItemFromDirTree } = dirTreeListSlice.actions;

// The function below is called a selector and allows us to select a value from the state.
export const selectDirTreeList = (state: RootState) => state.dirTreeList.value;

export default dirTreeListSlice.reducer;
